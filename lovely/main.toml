[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''-- TARGET: main scoring on played cards'''
position = 'after'
payload = '''
local a_pow = card:get_pow_bonus()
if a_pow > 0 then
	ret.playing_card.pow = a_pow
end
local x_pow = card:get_xpow_bonus()
if x_pow > 0 then
	ret.playing_card.x_pow = x_pow
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''bonus_chips = bonus_chips ~= 0 and bonus_chips or nil,'''
position = 'after'
payload = '''
bonus_pow     = (self.ability.perma_pow and self.ability.perma_pow ~= 0) and (self.ability.perma_pow) or nil,
bonus_x_pow   = (self.ability.perma_x_pow and self.ability.perma_x_pow ~= 0) and (self.ability.perma_x_pow + 1) or nil,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if specific_vars and specific_vars.bonus_p_dollars then'''
position = 'before'
payload = '''
if specific_vars and specific_vars.bonus_pow then
	localize{type = 'other', key = 'card_extra_pow', nodes = desc_nodes, vars = {specific_vars.bonus_pow}}
end
if specific_vars and specific_vars.bonus_x_pow then
	localize{type = 'other', key = 'card_extra_x_pow', nodes = desc_nodes, vars = {specific_vars.bonus_x_pow}}
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''if specific_vars and specific_vars.bonus_repetitions then'''
position = 'before'
payload = '''
if specific_vars and specific_vars.bonus_pow then
	localize{type = 'other', key = 'card_extra_pow', nodes = desc_nodes, vars = {specific_vars.bonus_pow}}
end
if specific_vars and specific_vars.bonus_x_pow then
	localize{type = 'other', key = 'card_extra_x_pow', nodes = desc_nodes, vars = {specific_vars.bonus_x_pow}}
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif eval_type == 'dollars' then"
position = "before"
payload = '''
elseif eval_type == 'pow' then
	sound = 'rgpd_pow_hit'
	amt = amt
	text = '+' .. amt
	colour = G.C.POW
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'x_pow' then
	sound = 'rgpd_xpow_hit'
	amt = amt
	text = 'X' .. amt
	colour = G.C.POW
	config.type = 'fade'
	config.scale = 0.7
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "SMODS.displaying_scoring = nil"
position = "after"
payload = '''pow = 1
G.E_MANAGER:add_event(Event({
    trigger = 'immediate',
    func = (function() 
	  	--quick fix
		update_hand_text({ delay = 0.4 }, {
			pow = 1 -- reset pow
		})
		return true 
	end)
}))'''
match_indent = true

